name: "Build and push lambda container image"
description: "Build lambda container image and push to AWS-ECR"
# DEPRECATED: use actions/aws/build-and-push-docker-image

inputs:
  version:
    description: version short sha
    required: true
  dockerfile:
    description: path to docker file
    required: true
  artifact_name:
    description: Name for artifact (without extension)
    required: true
  AWS_ACCESS_KEY_ID:
    description: "Aws access key"
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: "AWS secret"
    required: true
  AWS_REGION:
    description: "AWS region"
    required: true
  ECR_REPOSITORY_NAME:
    description: "ECR repository name"
    required: true

outputs:
  artifact_name:
    description: "Image artifact name"
    value: ${{ inputs.artifact_name }}
  artifact_file_name:
    description: "Image artifact filename"
    value: ${{ inputs.artifact_name }}.txt

runs:
  using: "composite"
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        version: v0.9.1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: "Build image Tags/URIs"
      id: image-tags-uri
      shell: bash
      run: |
        lambda_tag=${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPOSITORY_NAME }}:${{ inputs.version }}

        echo "lambda=$lambda_tag" >> $GITHUB_OUTPUT

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      uses: docker/build-push-action@v5
      with:
        push: true
        file: ${{ inputs.dockerfile }}
        tags: ${{ steps.image-tags-uri.outputs.lambda }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Save ImageURI as artifact_name.txt
      shell: bash
      env:
        IMAGE_URI: ${{ steps.image-tags-uri.outputs.lambda }}
      run: |
        echo $IMAGE_URI > ${{ inputs.artifact_name }}.txt

    - name: Save Image URI as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ inputs.artifact_name }}.txt

