name: "Promote Docker artifact image"
description: "Download artifact image, load into Docker, re-tag it and push it in ECR"

inputs:
  version:
    description: version short sha
    required: true
  artifact_name:
    description: Name of the source artifact (without extension)
    required: true
  artifact_file_name:
    description: Filename of the source artifact
    required: true
  artifact_tag:
    description: Docker tag of the source artifact
    required: true
  target_artifact_name:
    description: Name for output artifact (without extension)
    required: true
  AWS_ACCESS_KEY_ID:
    description: "Aws access key"
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: "AWS secret"
    required: true
  ECR_REPOSITORY:
    description: "ECR repository"
    required: true
  AWS_REGION:
    description: "AWS region"
    required: true

outputs:
  artifact_name:
    description: "Image artifact name"
    value: ${{ inputs.target_artifact_name }}
  artifact_file_name:
    description: "Image artifact filename"
    value: ${{ inputs.target_artifact_name }}.txt

runs:
  using: "composite"
  steps:
    - uses: actions/cache/restore@v4
      id: dl-artifact
      with:
        key: ${{ inputs.artifact_name }}
        path: ${{ inputs.artifact_file_name }}
        fail-on-cache-miss: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: "Load Docker image"
      id: docker-load
      shell: bash
      run: |
          docker_image_name=${{ inputs.artifact_file_name }}

          docker load --input $docker_image_name

          echo "docker_image_name=$docker_image_name" >> $GITHUB_OUTPUT

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.AWS_REGION }}

    - name: Login to the Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Tag & Push Docker image to ECR
      shell: bash
      id: image-tags-uri
      run: |
        new_tag=${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.version }}

        docker tag ${{ inputs.artifact_tag }} $new_tag
        docker push $new_tag

        echo "tag=$new_tag" >> $GITHUB_OUTPUT

    - name: Save ImageURI as target_artifact_name.txt
      env:
        IMAGE_URI: ${{ steps.image-tags-uri.outputs.tag }}
      run: |
        echo $IMAGE_URI > ${{ inputs.target_artifact_name }}.txt
      shell: bash

    - name: Save Image URI as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.target_artifact_name }}
        path: ${{ inputs.target_artifact_name }}.txt
