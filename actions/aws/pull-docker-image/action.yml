name: "Pull Docker image"
description: "Pull a Docker image from ECR and store it as artifact"

inputs:
  version:
    description: version short sha
    required: true
  artifact_name:
    description: Name for artifact (without extension)
    required: true
  AWS_ACCESS_KEY_ID:
    description: "Aws access key"
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: "AWS secret"
    required: true
  ECR_REPOSITORY:
    description: "ECR repository"
    required: true
  AWS_REGION:
    description: "AWS region"
    required: true
  docker_folder:
    description: "temp folder to store docker images"
    required: false
    default: "/tmp/docker"

outputs:
  artifact_name:
    description: "Image artifact name"
    value: ${{ steps.artifact-keys.outputs.key }}
  artifact_file_name:
    description: "Image artifact filename"
    value: ${{ steps.artifact-keys.outputs.path }}
  image_tag:
    description: "Image tag"
    value: ${{ steps.pull-docker.outputs.tag }}

runs:
  using: "composite"
  steps:
    - id: artifact-keys
      shell: bash
      run: |
        echo "key=$(echo ${{ inputs.artifact_name }}-${{ github.run_id }}-${{ github.run_attempt }})" >> $GITHUB_OUTPUT
        echo "path=$(echo ${{ inputs.docker_folder }}/${{ inputs.artifact_name }}.tar.gz)" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.AWS_REGION }}

    - name: Login to the Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: "Store Docker image URI"
      id: docker-uri
      shell: bash
      run: |
        echo "image-uri=$(echo ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.version }})" >> $GITHUB_OUTPUT

    - name: Pull Docker image from ECR
      id: pull-docker
      shell: bash
      run: |
        docker pull ${{ steps.docker-uri.outputs.image-uri }}

        tmp_tag=source-billing-db:${{ inputs.version }}
        docker tag ${{ steps.docker-uri.outputs.image-uri }} $tmp_tag
        echo "tag=$tmp_tag" >> $GITHUB_OUTPUT

    - name: Save Docker image as TAR
      shell: bash
      run: |
        mkdir -p ${{ inputs.docker_folder }}
        docker save ${{ steps.pull-docker.outputs.tag }} | gzip > ${{ steps.artifact-keys.outputs.path }}

    - name: Save Docker image in Cache
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.artifact-keys.outputs.key }}
        path: ${{ steps.artifact-keys.outputs.path }}
