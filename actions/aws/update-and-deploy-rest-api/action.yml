name: "Update API Gateway"
description: "Update API Gateway Rest API"

inputs:
  AWS_ACCESS_KEY_ID:
    description: "Aws access key"
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: "AWS secret"
    required: true
  AWS_REGION:
    description: "AWS region"
    required: true
  ARTIFACT_NAME:
    description: "Name of the Github Artifact"
    required: true
  ARTIFACT_FILE_NAME:
    description: "Filename to upload on S3"
    required: true
  APIGW_REST_API_ID:
    description: "Api Gateway REST API ID"
    required: true
  APIGW_STAGE_NAME:
    description: "Stage name"
    required: true
  APIGW_VERSION:
    description: "Version of the API Gateway to deploy"
    required: true
  apigw_put_mode:
    description: update mode of put-rest-api call (merge|overwrite)
    default: merge
    required: false

outputs:
  openapi_artifact_name:
    description: "Artifact Name for exported openapi file (YML)"
    value: ${{ steps.export_openapi.outputs.openapi_artifact_name }}
  openapi_artifact_filename:
    description: "Artifact FileName for exported openapi file (YML)"
    value: ${{ steps.export_openapi.outputs.openapi_artifact_filename }}

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.AWS_REGION }}

    - name: Fetch ApiGateway file artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.ARTIFACT_NAME }}

    - name: Update Api
      shell: bash
      run: |
        aws apigateway put-rest-api --rest-api-id ${{ inputs.APIGW_REST_API_ID }} --mode ${{ inputs.apigw_put_mode }} --body 'fileb://${{ inputs.ARTIFACT_FILE_NAME }}'
    
    - name: Deploy Api
      shell: bash
      run: |
        aws apigateway create-deployment --rest-api-id ${{ inputs.APIGW_REST_API_ID }} --stage-name ${{ inputs.APIGW_STAGE_NAME }} --description 'Deploy version ${{ inputs.APIGW_VERSION }} from CICD'

    - name: Publish ApiGw doc to stage
      shell: bash
      run: |
        doc_version="${{ inputs.APIGW_VERSION }}-$(date "+%Y%m%d-%H%M%S")"
        aws apigateway create-documentation-version --rest-api-id ${{ inputs.APIGW_REST_API_ID }} --documentation-version $doc_version --stage-name ${{ inputs.APIGW_STAGE_NAME }} --description 'Api documentation version ${{ inputs.APIGW_VERSION }} from CICD'

    - name: Export Openapi
      id: export_openapi
      shell: bash
      run: |
        openapi_artifact_name=openapi-export
        openapi_artifact_filename=openapi-export.yml

        aws apigateway get-export --rest-api-id ${{ inputs.APIGW_REST_API_ID }} --stage-name ${{ inputs.APIGW_STAGE_NAME }} --export-type oas30 --accepts application/yaml $openapi_artifact_filename

        echo "openapi_artifact_name=$openapi_artifact_name" >> $GITHUB_OUTPUT
        echo "openapi_artifact_filename=$openapi_artifact_filename" >> $GITHUB_OUTPUT

    - name: Save Image URI as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.export_openapi.outputs.openapi_artifact_name }}
        path: ${{ steps.export_openapi.outputs.openapi_artifact_filename }}
